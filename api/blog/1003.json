["# typescript 中的 _any_、 m unknow、never","","告别 anyscript，可以使用 eslint 或者 pre-commit hook 进行限制。","","## 干掉 _any_?","","_any_ 是 toptype 并且也是 subtype，可以赋值给任何类型，也可以被任何类型赋值。","也就是去掉了强制类型检测，违背了使用 TypeScript 的目的。所以选择干掉 any","","## 不使用 _any_,没有创建类型的第三方库或全部类型的 _union_ 使用 _unknow_ 类型","","_unknow_ 类型是 toptype，即所有类型都可以给 _unknow_ 类型赋值，","但 _unknow_ 类型只能给自己或者 any 赋值。","","```ts","// 任何值都可以赋值给unkown类型","let val: unknow = 'hello world!';","val = 1;","val = () => 1 + 1;","","// unkown类型的值不能直接赋值给其他类型，除了unkown类型和any类型","const valueUnknow: unknow = val;","const valueAny: any = val;","```","","1. 使用类型断言","","```ts","// 字符串类型赋值","const val: unknow = 'hello world!';","let str: string = val as string;","```","","2. 类型判断","","```ts","// 字符串类型赋值","let val: unknow = 'aaa';","if (typeof val === 'string') {","  const str: string = val.slice(1);","  console.log(str);","}","","// 数组类型赋值","val = [1, 2, 3];","if (val instanceof Array) {","  const arr: Array<number> = val;","  console.log(arr);","}","```","","## never 与 unknow 相反","","never 类型是 subtype，即 _never_ 类型可以赋值给所有类型，","但 _never_ 类型不能被任何类型赋值","","应用场景：","","```ts","// 抛出异常的函数返回值类型为 never","function error(message: string): never {","  throw new Error(message);","}","","// 推断的返回值类型为 never","function fail(): never {","  return error('Something failed');","}","","// 类型定义","type NonNullable<T> = T extends null | undefined ? never : T;","```",""]